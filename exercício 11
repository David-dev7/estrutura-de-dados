#include <stdio.h>
#include <stdlib.h>

typedef struct No {
    char valor;
    struct No* prox;
} No;

typedef struct {
    No* topo;
} Pilha;

void inicializar(Pilha* p) {
    p->topo = NULL;
}

void push(Pilha* p, char valor) {
    No* novo = malloc(sizeof(No));
    novo->valor = valor;
    novo->prox = p->topo;
    p->topo = novo;
}

char pop(Pilha* p) {
    if (p->topo == NULL) return '\0';
    No* temp = p->topo;
    char val = temp->valor;
    p->topo = temp->prox;
    free(temp);
    return val;
}

int esta_vazia(Pilha* p) {
    return p->topo == NULL;
}

int verificar_balanceamento(char* str) {
    Pilha p;
    inicializar(&p);
    for (int i = 0; str[i] != '\0'; i++) {
        char c = str[i];
        if (c == '(' || c == '{' || c == '[') push(&p, c);
        else if (c == ')' || c == '}' || c == ']') {
            if (esta_vazia(&p)) return 0;
            char t = pop(&p);
            if ((c == ')' && t != '(') ||
                (c == '}' && t != '{') ||
                (c == ']' && t != '[')) return 0;
        }
    }
    return esta_vazia(&p);
}

int main() {
    printf("%d\n", verificar_balanceamento("({[]})"));
    printf("%d\n", verificar_balanceamento("({[})"));
    return 0;
}
