#include <stdio.h>
#include <stdlib.h>

// Estrutura do nó
typedef struct No {
    int valor;
    struct No* prox;
} No;

// Inserção em posição específica
void inserir_posicao(No** lista, int valor, int pos) {
    No* novo = malloc(sizeof(No));
    novo->valor = valor;

    if (pos == 0 || *lista == NULL) {
        novo->prox = *lista;
        *lista = novo;
        return;
    }

    No* atual = *lista;
    for (int i = 0; atual != NULL && i < pos - 1; i++) {
        atual = atual->prox;
    }

    if (atual == NULL) {
        free(novo); // posição inválida
        return;
    }

    novo->prox = atual->prox;
    atual->prox = novo;
}

// Inserir no fim (para montar a lista)
void inserir_fim(No** lista, int valor) {
    No* novo = malloc(sizeof(No));
    novo->valor = valor;
    novo->prox = NULL;

    if (*lista == NULL) {
        *lista = novo;
    } else {
        No* atual = *lista;
        while (atual->prox != NULL)
            atual = atual->prox;
        atual->prox = novo;
    }
}

// Imprimir a lista
void imprimir_lista(No* lista) {
    while (lista != NULL) {
        printf("%d -> ", lista->valor);
        lista = lista->prox;
    }
    printf("NULL\n");
}

// Função principal
int main() {
    No* lista = NULL;

    inserir_fim(&lista, 10);
    inserir_fim(&lista, 20);
    inserir_fim(&lista, 40);

    printf("Lista antes da inserção:\n");
    imprimir_lista(lista);

    inserir_posicao(&lista, 30, 2); // Inserir 30 na posição 2
    inserir_posicao(&lista, 5, 0);  // Inserir 5 no início

    printf("Lista após inserções:\n");
    imprimir_lista(lista);

    return 0;
}
